- defaultTab: nodes
  description: "Retrieve EC2 Instance Status and IAM Role using AWS CLI\n\nThis Job\
    \ uses the AWS CLI to retrieve the targeted EC2 instance status as well as the\
    \ associated IAM Roles. This can be useful when diagnosing and troubleshooting\
    \ EC2 related alarms and incidents.\n\nThe EC2 is targeted using the EC2 `instanceId`.\
    \ Therefore, integrations invoking this Job should supply the EC2 Instance ID\
    \ as a Job Option in their payload. This Job does **not** require the EC2 to be\
    \ added as a Node.  \n\nSee the **ReadMe** for more details on how to use the\
    \ AWS CLI within the Runbook & Process Automation products.\n---\n#### How to\
    \ use the AWS CLI within the Runbook & Process Automation Products\n\nBelow you\
    \ will find instructions on how to configure the AWS CLI to work with this automation.\n\
    \n##### Runbook Automation\n1. Install an Enterprise Runner. Documentation for\
    \ that can be found [here](https://docs.rundeck.com/docs/administration/runner/#enterprise-runner)\n\
    2. Install the [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)\
    \ on either the Enterprise Runner, or on a remote-node that the Enterprise Runner\
    \ can communicate with via SSH.\n3. Add the host of the Enterprise Runner or the\
    \ remote-node from **Step 2** as a Node to the Node Inventory. This can be accomplished\
    \ using a Node Source, found by navigating to **Project Settings** -> **Edit Nodes**\
    \ -> **Sources** -> **Add New Node Source**.\n4. Navigate to the **Nodes** tab\
    \ within this Job and change the setting to **Dispatch to Nodes** and use the\
    \ Node Filter Syntax to filter on either the Enterprise Runner or remote-node\
    \ added in **Step 3**.\n\n##### Process Automation\nBecause the Process Automation\
    \ is self-hosted, there are two options for executing the AWS CLI: install on\
    \ the Process Automation server (or entire cluster) or install on a remote-node\
    \ that can be reached via SSH from Process Automation.\nIf the AWS CLI is installed\
    \ on the Process Automation server, then you can skip these steps and this Job\
    \ should execute successfully.\n\n1. If the CLI was installed on a remote-node,\
    \ add it to the Node Inventory as described in **Step 3** above.\n2. Navigate\
    \ to the **Nodes** tab within this Job and change the setting to **Dispatch to\
    \ Nodes** and use the Node Filter Syntax to filter on either the Enterprise Runner\
    \ or remote-node added in **Step 1**.\n\n##### Permissions required by the IAM\
    \ Role or AWS credentials to execute this job:\n\n**ec2:DescribeIamInstanceProfileAssociations**<br>\n\
    **ec2:DescribeInstanceStatus**"
  executionEnabled: true
  group: AWS/EC2
  id: 04b99b7b-2137-4db6-9cd2-6a1795dc853f
  loglevel: INFO
  name: Retrieve Instance Status
  nodeFilterEditable: false
  notification:
    onfailure:
      plugin:
        configuration:
          incident_id: ${option.pd_incident_id}
          note: 'Automated diagnostics job did not complete.  For full details, click
              here: ${job.url}#output'
        type: pd-note-incident-notification
  notifyAvgDurationThreshold: null
  options:
  - description: The instance ID of the EC2 to check status.
    label: EC2 Instance ID
    name: instanceId
    required: true
    value: EC2 instance ID
  - description: |-
      ID of the PagerDuty incident that should receive the diagnostics queried from this automation.
      This field is **_not_** required to invoke this Job.
    label: PagerDuty Incident ID
    name: pd_incident_id
  plugins:
    ExecutionLifecycle: null
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - description: Get EC2 Instance Status from AWS
      exec: aws ec2 describe-instance-status --instance-ids ${option.instanceId}
      plugins:
        LogFilter:
        - config:
            filter: .InstanceStatuses[].InstanceStatus.Details[].Status
            logData: 'true'
            prefix: Instance-Status
          type: json-mapper
        - config:
            filter: .InstanceStatuses[].SystemStatus.Details[].Status
            logData: 'true'
            prefix: System-Status
          type: json-mapper
    - description: Get IAM Role Associated
      exec: 'aws ec2 describe-iam-instance-profile-associations --filters Name=instance-id,Values=${option.instanceId}'
      plugins:
        LogFilter:
        - config:
            filter: .IamInstanceProfileAssociations[].IamInstanceProfile
            logData: 'true'
            prefix: IAM_Role
          type: json-mapper
        - config:
            captureMultipleKeysValues: 'false'
            hideOutput: 'false'
            logData: 'true'
            name: instance_diagnostics
            regex: (.*)
          type: key-value-data-multilines
    - configuration:
        incident_id: ${option.pd_incident_id}
        note: '${data.instance_diagnostics*}\n\nClick here for detailed diagnostics:
          ${job.url}#output'
      description: Send Diagnostics to PagerDuty
      errorhandler:
        configuration:
          text: Please provide PagerDuty API token to send diagnostics to Incident.
        keepgoingOnSuccess: true
        nodeStep: false
        type: progress-badge
      nodeStep: false
      type: pd-note-step
    keepgoing: false
    strategy: node-first
  tags: 'aws,ec2'
  uuid: 04b99b7b-2137-4db6-9cd2-6a1795dc853f

