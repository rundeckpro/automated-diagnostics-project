- defaultTab: nodes
  description: |-
    Performs a thread-dump of a Java app running in ECS and sends the output to S3

    This Job uses the [ECS Run Command Plugin](https://docs.rundeck.com/docs/manual/workflow-steps/aws-ecs-fargate.html#send-commands-to-ecs-containers) to send commands to containers running on ECS.

    The output of the command is then sent to a textfile in S3 using the [Lambda Custom Code Plugin](https://docs.rundeck.com/docs/manual/workflow-steps/aws-lambda.html#lambda-custom-code-execution).
    This is meant to demonstrate that certain diagnostics are best saved and viewed through storage services - such as S3.
  executionEnabled: true
  group: AWS/ECS
  id: 7f702c19-fad5-4a8d-adcc-7c79972f9139
  loglevel: INFO
  name: Java Thread Dump from Container
  nodeFilterEditable: false
  options:
  - label: AWS Region
    name: aws-region
    optionValuesPluginType: aws-regions-job-options
    required: true
  - description: Name of the ECS Cluster
    label: Cluster Name
    name: cluster-name
    required: true
  - description: Name of the container running in ECS
    label: Container Name
    name: container-name
    required: true
  - description: The ID of the ECS Task where the container is running
    label: Task ID
    name: task-id
    required: true
  plugins:
    ExecutionLifecycle: {}
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - configuration:
        cluster: ${option.cluster-name}
        command: pgrep java
        container: ${option.container-name}
        region: ${option.aws-region}
        task: ${option.task-id}
      description: Retrieve Java Process ID
      nodeStep: false
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'false'
            hideOutput: 'true'
            logData: 'true'
            name: process-id
            regex: .*(\d+).*
          type: key-value-data-multilines
      type: aws-ecs-run-command
    - configuration:
        cluster: ${option.cluster-name}
        command: sudo -u rundeck jstack ${data.process-id}
        container: ${option.container-name}
        region: ${option.aws-region}
        task: ${option.task-id}
      description: Perform Jstack Thread Dump
      nodeStep: false
      plugins:
        LogFilter:
        - config:
            captureMultipleKeysValues: 'false'
            hideOutput: 'true'
            logData: 'false'
            name: jstack-output
            regex: (.*)
          type: key-value-data-multilines
      type: aws-ecs-run-command
    - configuration:
        deleteFuncAfter: 'true'
        eventPayload: '{"Key1":"Value1","Key2":"Value2"}'
        executionRoleArn: arn:aws:iam::027501300764:role/send-full-diagnostics-s3
        functionCode: "import time\nimport boto3\n\ndef lambda_handler(event,context):\n\
          \n    #Captured data-variable from prior step\n    jstack_output=\"\"\"\
          ${data.jstack_output}\"\"\"\n    \n    s3=boto3.resource('s3')\n    \n \
          \   try:\n        object=s3.Object('automated-diagnostics', 'jstack-output.txt')\n\
          \        object.put(Body=jstack_output)\n        result=\"Successfully sent\
          \ Jstack Output to S3\"\n        \n    except:\n        result=\"Could Not\
          \ Send Data to S3\"\n        \n    \n    return {\n        \"Result\":result\n\
          \    }\n    \n    "
        handlerFunctionName: lambda_handler
        region: ${option.aws-region}
        runtime: python3.9
        tags: '{"Key1":"Value1","Key2":"Value2"}'
      description: Send Jstack Output to S3
      nodeStep: false
      type: aws-lambda-custom-code-execution
    keepgoing: false
    strategy: node-first
  tags: 'aws,ecs,lambda'
  uuid: 7f702c19-fad5-4a8d-adcc-7c79972f9139

