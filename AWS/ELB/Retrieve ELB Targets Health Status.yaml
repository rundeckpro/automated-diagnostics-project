- defaultTab: nodes
  description: "Using an AWS Load Balancer's name, retrieve the list of unhealthy\
    \ Targets in the Load Balancer's associated Target Groups.\n\nThis Rundeck Job\
    \ uses the AWS CLI to retrieve the list of **unhealthy** instances associated\
    \ with a given Load Balancer. \n\nBecause this Job uses the AWS CLI, the EC2 (targets)\
    \ do not need to be added as Nodes.\n\nSee the **ReadMe** for more details on\
    \ how to use the AWS CLI within the Runbook & Process Automation products.\n---\n\
    #### How to use the AWS CLI within the Runbook & Process Automation Products\n\
    \nBelow you will find instructions on how to configure the AWS CLI to work with\
    \ this automation.\n\n##### Runbook Automation\n1. Install an Enterprise Runner.\
    \ Documentation for that can be found [here](https://docs.rundeck.com/docs/administration/runner/#enterprise-runner)\n\
    2. Install the [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)\
    \ on either the Enterprise Runner, or on a remote-node that the Enterprise Runner\
    \ can communicate with via SSH.\n3. Add the host of the Enterprise Runner or the\
    \ remote-node from **Step 2** as a Node to the Node Inventory. This can be accomplished\
    \ using a Node Source, found by navigating to **Project Settings** -> **Edit Nodes**\
    \ -> **Sources** -> **Add New Node Source**.\n4. Navigate to the **Nodes** tab\
    \ within this Job and change the setting to **Dispatch to Nodes** and use the\
    \ Node Filter Syntax to filter on either the Enterprise Runner or remote-node\
    \ added in **Step 3**.\n\n##### Process Automation\nBecause the Process Automation\
    \ is self-hosted, there are two options for executing the AWS CLI: install on\
    \ the Process Automation server (or entire cluster) or install on a remote-node\
    \ that can be reached via SSH from Process Automation.\nIf the AWS CLI is installed\
    \ on the Process Automation server, then you can skip these steps and this Job\
    \ should execute successfully.\n\n1. If the CLI was installed on a remote-node,\
    \ add it to the Node Inventory as described in **Step 3** above.\n2. Navigate\
    \ to the **Nodes** tab within this Job and change the setting to **Dispatch to\
    \ Nodes** and use the Node Filter Syntax to filter on either the Enterprise Runner\
    \ or remote-node added in **Step 1**.\n\n##### Permissions required by the IAM\
    \ Role or AWS credentials to execute this job:\n\n**elasticloadbalancing:DescribeLoadBalancers**<br>\n\
    **elasticloadbalancing:DescribeTargetHealth**<br>\n**elasticloadbalancing:DescribeTargetGroups**<br>"
  executionEnabled: true
  group: AWS/ELB
  id: 3b499022-6faf-4431-bf98-94678f64ce47
  loglevel: INFO
  name: Retrieve ELB Targets Health Status
  nodeFilterEditable: false
  options:
  - label: Load Balancer Name
    name: load_balancer_name
    value: polling-cluster
  plugins:
    ExecutionLifecycle: {}
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - description: Retrieve Load Balancer ARN
      exec: aws elbv2 describe-load-balancers --names ${option.load_balancer_name}
        --query 'LoadBalancers[0].LoadBalancerArn' --output text
      plugins:
        LogFilter:
        - config:
            invalidKeyPattern: \s|\$|\{|\}|\\
            logData: 'true'
            name: elb_arn
            regex: (.*)
          type: key-value-data
    - exec: aws elbv2 describe-target-groups --load-balancer-arn ${data.elb_arn*}
        --query 'TargetGroups[*].TargetGroupArn' --output text
      plugins:
        LogFilter:
        - config:
            hideOutput: 'true'
            logData: 'true'
            name: target_groups_arns
            regex: (.*)
          type: key-value-data-multilines
    - fileExtension: sh
      interpreterArgsQuoted: false
      plugins:
        LogFilter:
        - config:
            hideOutput: 'true'
            logData: 'true'
            name: unhealthy_instances
            regex: (.*)
          type: key-value-data-multilines
      script: "#Set argument as data variable from previous step\ntarget_groups=(@data.target_groups_arns*@)\n\
        \nquery=\"TargetHealthDescriptions[?TargetHealth.State!=\\`healthy\\`].{Instance_Id:Target.Id,Health_Check_Port:HealthCheckPort,Target_Health_State:TargetHealth.State,Target_Health_Description:TargetHealth.Description}\"\
        \n\n#Loop over Target Groups to retrieve Health Checks from all instances\n\
        for target_group in \"${target_groups[@]}\"; \ndo \n    aws elbv2 describe-target-health\
        \ --target-group-arn $target_group --query $query;\ndone"
      scriptInterpreter: /bin/bash
    keepgoing: false
    strategy: node-first
  tags: 'aws,elb'
  uuid: 3b499022-6faf-4431-bf98-94678f64ce47

