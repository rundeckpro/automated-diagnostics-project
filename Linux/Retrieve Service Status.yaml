- defaultTab: nodes
  description: |-
    Retrieve the status of a specific service running a remote Linux host.

    This Job uses **`systemctl`** to retrieve the status of an individual service running on a remote linux node.

    See the [**Project Readme**](/project/automated-diagnostics/home) for recommended tours on how to add remote-nodes and configure connectivity to them using methods such as SSH or Systems Manager (SSM).
  executionEnabled: true
  group: Linux
  id: b4bee8ee-398e-4a98-9e12-4f5ea15ea94b
  loglevel: INFO
  name: Retrieve Service Status
  nodeFilterEditable: true
  notification:
    onfailure:
      plugin:
        configuration:
          incident_id: ${option.pd_incident_id}
          note: 'Automated diagnostics job did not complete.  For full details, click
              here: ${job.url}#output'
        type: pd-note-incident-notification
  notifyAvgDurationThreshold: null
  nodefilters:
    dispatch:
      excludePrecedence: true
      keepgoing: false
      rankOrder: ascending
      successOnEmptyNodeFilter: false
      threadcount: '1'
    filter: .*
  nodesSelectedByDefault: true
  options:
  - description: |-
      ID of the PagerDuty incident that should receive the diagnostics queried from this automation.
      This field is **_not_** required to invoke this Job.
    label: PagerDuty Incident ID
    name: pd_incident_id
  - description: The name of the service running on the remote node. For example `sshd`
    label: Service Name
    name: service_name
    required: true
  plugins:
    ExecutionLifecycle: null
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - description: Retrieve Service Name
      errorhandler:
        configuration:
          fail: 'false'
          halt: 'false'
          status: Service Down
        keepgoingOnSuccess: true
        nodeStep: false
        type: flow-control
      exec: systemctl status ${option.service_name}
      plugins:
        LogFilter:
        - config:
            contextVariable: service-status
            doNothing: 'true'
            mute: 'false'
            regex: '.*Active: active.*'
            statusSymbol: ✅
            text: Healthy
          type: progress-badges
        - config:
            contextVariable: service-status
            doNothing: 'true'
            mute: 'false'
            regex: '.*Active: failed.*'
            statusSymbol: ❌
            text: Unhealthy
          type: progress-badges
    - configuration:
        api_token: keys/project/automated-diagnostics/pd-api-key
        email: ${globals.pd-email}
        incident_id: ${option.pd_incident_id}
        note: 'Service Status: ${data.service-status*}\n\nClick here for detailed
          diagnostics: ${job.url}#output'
      description: Send Diagnostics to PagerDuty
      errorhandler:
        configuration:
          text: Please provide PagerDuty API token and Incident ID to send diagnostics
            to Incident.
        keepgoingOnSuccess: true
        nodeStep: false
        type: progress-badge
      nodeStep: false
      type: pd-note-step
    keepgoing: false
    strategy: sequential
  tags: linux
  uuid: b4bee8ee-398e-4a98-9e12-4f5ea15ea94b

